import { test, expect } from '@playwright/test';
import { NavigationPage } from '../../../page_objects/navigationPage';

const orgURL = process.env.DYN365_TEST_ORG_URL ?? '';
let duplicateLocator: any;
let isDuplicateFound: any;
let opportunityNumber: any;
let targetCompany : string = "*DNU* George P Johnson Company";
let workOrderNumber: string;
let charge_status: any;
let contact_customer = "Kim Campbell";
let install_start_date = '2/26/2025';
let install_end_date = "2/28/2025";
let dismantle_start_date = "3/5/2025";
let dismantle_end_date = "3/6/2025";
let exhibitor_selected = "Bed Bug Pajamas"
let frame;
let showNumber = "S-211603";
let showName = "Steffy Automation show";
test('Verify that the designated user can correct the Charge for Order field if set incorrectly.', async ({ page }) => {

    await page.goto(orgURL);
    page.setViewportSize({ width: 1536, height: 864 });
    const navigateTo = new NavigationPage(page);
    await navigateTo.showsPage();
    await page.getByPlaceholder('Filter by keyword').first().click();
    await page.waitForTimeout(3000);
    await page.getByPlaceholder('Filter by keyword').fill(showNumber);
    await page.waitForTimeout(2000);
    await page.keyboard.press("Enter");
    await page.getByText(showName).first().click();
    await page.waitForTimeout(3000);
    await page.getByLabel("Work Order Information", { exact: true }).click();
    await page.getByLabel("More commands for Opportunity", { exact: true }).click();
    await page.getByLabel('New Opportunity. Add New').click();
    await page.getByLabel('Division').click();
    await page.getByRole('option', { name: 'Fern: City Project' }).click();
    await page.getByLabel('Opportunity Type').click();
    await page.waitForTimeout(2000);
    await page.getByRole('option', { name: 'Retention' }).click();
    await page.getByLabel('Opportunity Type').click();
    await page.getByLabel('Search records for Source Customer, Lookup field').click();
    await page.getByPlaceholder('Look for Source Customer').fill(targetCompany);
    await page.waitForTimeout(2000);
    await page.getByLabel('*DNU* George P Johnson Company').getByText(targetCompany).click();
    await page.getByLabel('Source Contact, Lookup', { exact: true }).click();
    await page.getByPlaceholder('Look for Contact').fill(contact_customer);
    await page.waitForTimeout(2000);
    await page.getByText(contact_customer).click();
    await page.getByLabel('Prepay Contact, Lookup', { exact: true }).click();
    await page.getByPlaceholder('Look for Prepay Contact').fill(contact_customer);
    await page.getByPlaceholder('Look for Prepay Contact').press('Enter');
    await page.getByRole('treeitem', { name: contact_customer }).click();
    await page.getByLabel('Bill To Contact, Lookup', { exact: true }).click();
    await page.getByPlaceholder('Look for Bill To Contact').fill(contact_customer);
    await page.waitForTimeout(2000);
    await page.getByLabel('Kim Campbell,').getByText(contact_customer).click();
    await page.waitForTimeout(2000);
    await page.getByLabel('Search records for Venue,').click();
    await page.waitForTimeout(4000);
    await page.locator("//input[@aria-label='Venue, Lookup']").click();
    await page.waitForTimeout(4000);
    //await page.locator("//input[@aria-label='Venue, Lookup']").fill('Test Suyati Venue');
    await page.getByText('Test Suyati Venue').first().click();
    await page.getByLabel('Exhibitor, Lookup', { exact: true }).click();
    await page.getByPlaceholder('Look for Exhibitor').fill(exhibitor_selected);
    await page.waitForTimeout(2000);
    await page.getByText(exhibitor_selected).click();
    await page.getByLabel('Booth Number').click();
    await page.getByLabel('Booth Number').fill('testing work order automation');
    await page.waitForTimeout(2000);
    await page.getByLabel('Date of Install Start').click();
    await page.getByLabel('Date of Install Start').fill(install_start_date);
    await page.waitForTimeout(4000);
    await page.getByLabel('Date of Install End').click();
    await page.getByLabel('Date of Install End', { exact: true }).first().click();
    await page.getByLabel('Date of Install End', { exact: true }).first().fill(install_end_date);
    await page.waitForTimeout(2000);
    await page.getByLabel('Install Resources').first().click();
    await page.getByPlaceholder('Provide a number').first().dblclick();
    await page.getByPlaceholder('Provide a number').first().fill('4');
    await page.waitForTimeout(2000);
    await page.getByLabel('Dismantle Supervisor Company, Lookup').first().click();
    await page.getByLabel('Dismantle Supervisor Company, Lookup').first().fill('Nth Degree');
    await page.waitForTimeout(2000);
    await page.getByLabel('Nth Degree', { exact: true }).getByText('Nth Degree').first().click();
    await page.getByLabel('Date of Dismantle Start').first().fill(dismantle_start_date);
    await page.waitForTimeout(2000);
    await page.getByLabel('Date of Dismantle End').click();
    await page.getByLabel('Date of Dismantle End').first().fill(dismantle_end_date);
    await page.waitForTimeout(2000);
    await page.getByLabel('Time of Dismantle Start', { exact: true }).click();
    await page.getByLabel('Dismantle Resources').click();
    await page.getByPlaceholder('Provide a number').fill('5');
    await page.locator('button:has-text("Save")').first().click();
    await page.waitForTimeout(10000);
    duplicateLocator = page.getByLabel('Duplicate records found').last();
    isDuplicateFound = await duplicateLocator.count() > 0;
    if (isDuplicateFound) {
        await page.getByTitle('Ignore and save').click();
        await page.waitForTimeout(20000);
    }
    opportunityNumber = await page.locator('h1[data-id="header_title"]').innerText();
    expect(opportunityNumber).toContain("OC");
    opportunityNumber = opportunityNumber.replace('- Saved', '');
    await page.getByLabel('Save More Commands. Save (CTRL+S)').click();
    //await page.getByLabel('Save & Close').click();
    await page.getByPlaceholder('Filter by keyword').first().click();
    await page.waitForTimeout(2000);
    await page.getByPlaceholder('Filter by keyword').fill(opportunityNumber);
    await page.keyboard.press("Enter");
    await page.waitForTimeout(2000);
    await page.getByText(opportunityNumber).first().click()
    await page.waitForTimeout(2000);
    await page.getByLabel('Billing', { exact: true }).click();
    await page.reload();
    await page.getByLabel('Billing', { exact: true }).click();
    await page.waitForTimeout(5000);
    await page.selectOption('select[aria-label="Charge for Order"]', { label: 'Yes' });
    charge_status = await page.locator('select[aria-label="Charge for Order"]').inputValue();
    expect(charge_status).toBe('Yes');
    await page.getByLabel('Save More Commands. Save (CTRL+S)').click();
    await page.waitForTimeout(2000);
    await page.getByLabel("Daily Requirements").first().click();
    frame = page.frameLocator('[title="Generate Daily Requirements"]');
    await frame.getByText('Generate DR').click();
    await page.waitForTimeout(5 * 3000);
    await page.getByLabel('Products').last().click();
    await page.waitForTimeout(1000);
    frame = page.frameLocator('[title="Populate Opportunity Products"]');
    await frame.getByText('Populate Opportunity Products').click();
    await page.waitForTimeout(3 * 3000);
    await page.getByLabel('Estimates').first().click();
    await page.waitForTimeout(3000);
    await page.locator('button:has-text("New Estimate")').click();
    await page.waitForTimeout(3 * 3000);
    frame = page.frameLocator('[title="CalculateTaxEstimateHTML"]');
    await frame.getByText('Calculate Tax').click();
    await page.waitForTimeout(3 * 3000);
    await page.locator('button:has-text("Activate Estimate")').click();
    await page.waitForTimeout(3 * 3000);
    await page.getByLabel('Press Enter to go back.').first().click();
    await page.waitForTimeout(3000);
    await page.getByLabel('Convert to Work Order').click();
    await page.waitForTimeout(5 * 3000);
    if (isDuplicateFound) {
        await page.getByTitle('Ignore and save').click();
        await page.waitForTimeout(20000);

    }
    await page.getByTitle("OK").last().click();
    await page.getByTitle("OK").last().click();

})

